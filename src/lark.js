// src/lark.js - Fixed version without non-existent "Ghi ch√∫" field
const axios = require("axios");

// Lark API Configuration
const LARK_BASE_URL = "https://open.larksuite.com/open-apis";
const LARK_TOKEN_URL =
  "https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal";

// CRM Base Configuration
const CRM_BASE_TOKEN = process.env.LARK_CRM_BASE_TOKEN;
const CRM_TABLE_ID = process.env.LARK_CRM_TABLE_ID;

/**
 * Get Lark access token
 */
async function getLarkToken() {
  try {
    const response = await axios.post(
      LARK_TOKEN_URL,
      {
        app_id: process.env.LARK_APP_ID,
        app_secret: process.env.LARK_APP_SECRET_KEY,
      },
      {
        headers: {
          "Content-Type": "application/json; charset=utf-8",
        },
      }
    );

    return response.data.tenant_access_token;
  } catch (error) {
    console.error("‚ùå Error getting Lark token:", error.message);
    throw error;
  }
}

/**
 * ‚úÖ Add record to CRM Base - FIXED VERSION
 */
async function addRecordToCRMBase(formData) {
  try {
    console.log("üìù Adding record to CRM Base (fixed mapping)...", formData);

    if (!CRM_BASE_TOKEN || !CRM_TABLE_ID) {
      throw new Error("Missing CRM Base configuration");
    }

    const token = await getLarkToken();

    // ‚úÖ FIXED MAPPING: Only use fields that exist in Base
    const recordData = {
      fields: {
        "H·ªç v√† t√™n": formData.name, // ‚úÖ Exists
        "S·ªë ƒëi·ªán tho·∫°i": formData.phone, // ‚úÖ Exists
        "M√¥ h√¨nh kinh doanh": formData.type, // ‚úÖ Exists
        "S·ªë v√© ƒëƒÉng k√Ω": parseInt(formData.ticket) || 1, // ‚úÖ Exists (Number type)
        Workshop: formData.city, // ‚úÖ Exists

        // ‚ùå REMOVED: "Ghi ch√∫" field doesn't exist in Base
        // We'll handle email in notification instead
      },
    };

    console.log("üì§ Sending fixed data (no Ghi ch√∫ field):");
    console.log(JSON.stringify(recordData, null, 2));

    const response = await axios.post(
      `${LARK_BASE_URL}/bitable/v1/apps/${CRM_BASE_TOKEN}/tables/${CRM_TABLE_ID}/records`,
      recordData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        timeout: 10000,
      }
    );

    if (response.data.code === 0) {
      const record = response.data.data.record;
      const autoSTT =
        record.fields.STT || record.fields["STT"] || Date.now() % 10000;

      console.log(
        `‚úÖ CRM record created successfully: ${record.record_id} (STT: ${autoSTT})`
      );

      // Send notification with email info (since we can't store it in Base)
      await sendCRMNotificationToGroup(formData, autoSTT);

      return {
        success: true,
        record_id: record.record_id,
        stt: autoSTT,
        data: record,
      };
    } else {
      console.error("üìÑ LarkSuite API Error:", response.data);
      throw new Error(
        `Failed to add CRM record: ${response.data.msg || "Unknown error"}`
      );
    }
  } catch (error) {
    console.error("‚ùå Error adding record to CRM Base:", error.message);
    if (error.response) {
      console.error("üìÑ API Error Details:", error.response.data);
    }
    throw error;
  }
}

/**
 * Enhanced notification - Email info included here since Base doesn't have Ghi ch√∫ field
 */
async function sendCRMNotificationToGroup(formData, autoGeneratedSTT) {
  try {
    const token = await getLarkToken();

    const message = {
      msg_type: "interactive",
      card: {
        config: {
          wide_screen_mode: true,
        },
        header: {
          title: {
            tag: "plain_text",
            content: "üéØ New Workshop Registration - CRM Updated",
          },
          template: "green",
        },
        elements: [
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üÜî STT:** ${autoGeneratedSTT}\n**üë§ H·ªç v√† t√™n:** ${formData.name}\n**üì± S·ªë ƒëi·ªán tho·∫°i:** ${formData.phone}`,
            },
          },
          {
            tag: "div",
            fields: [
              {
                is_short: true,
                text: {
                  tag: "lark_md",
                  content: `**üìß Email:**\n${formData.email || "Kh√¥ng c√≥"}`,
                },
              },
              {
                is_short: true,
                text: {
                  tag: "lark_md",
                  content: `**üé´ S·ªë v√©:**\n${formData.ticket}`,
                },
              },
            ],
          },
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üè¢ M√¥ h√¨nh kinh doanh:** ${formData.type}\n**üé™ Workshop:** ${formData.city}`,
            },
          },
          {
            tag: "hr",
          },
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üìß Chi ti·∫øt Email:** ${
                formData.email
              }\n**üåê Ngu·ªìn:** Website Registration\n**‚è∞ Th·ªùi gian:** ${new Date().toLocaleString(
                "vi-VN",
                {
                  timeZone: "Asia/Ho_Chi_Minh",
                }
              )}\n**üÜî IP:** ${formData.clientIP || "N/A"}`,
            },
          },
          {
            tag: "action",
            actions: [
              {
                tag: "button",
                text: {
                  tag: "plain_text",
                  content: "üìã M·ªü CRM",
                },
                type: "primary",
                url: `https://dieptra2018.sg.larksuite.com/base/${CRM_BASE_TOKEN}?table=${CRM_TABLE_ID}&view=vewIia5G5j`,
              },
              {
                tag: "button",
                text: {
                  tag: "plain_text",
                  content: "üìû G·ªçi kh√°ch",
                },
                type: "default",
                url: `tel:${formData.phone}`,
              },
              {
                tag: "button",
                text: {
                  tag: "plain_text",
                  content: "üìß Email kh√°ch",
                },
                type: "default",
                url: `mailto:${formData.email}`,
              },
            ],
          },
        ],
      },
    };

    if (process.env.LARK_CHAT_ID) {
      const response = await axios.post(
        `${LARK_BASE_URL}/message/v4/send`,
        {
          chat_id: process.env.LARK_CHAT_ID,
          ...message,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          timeout: 5000,
        }
      );

      console.log("üì¢ CRM notification sent to group");
      return response.data;
    } else {
      console.log(
        "‚ö†Ô∏è LARK_CHAT_ID not configured. Skipping group notification."
      );
    }
  } catch (error) {
    console.error(
      "‚ö†Ô∏è Failed to send CRM notification (non-critical):",
      error.message
    );
  }
}

/**
 * Get CRM statistics
 */
async function getCRMStats() {
  try {
    const token = await getLarkToken();

    const response = await axios.get(
      `${LARK_BASE_URL}/bitable/v1/apps/${CRM_BASE_TOKEN}/tables/${CRM_TABLE_ID}/records`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
        params: {
          page_size: 500,
        },
      }
    );

    if (response.data.code === 0) {
      const records = response.data.data.items;
      const stats = {
        total: records.length,
        todayCount: records.filter((r) => {
          const createDate = new Date(r.created_time);
          const today = new Date();
          return createDate.toDateString() === today.toDateString();
        }).length,
        lastWeekCount: records.filter((r) => {
          const createDate = new Date(r.created_time);
          const weekAgo = new Date();
          weekAgo.setDate(weekAgo.getDate() - 7);
          return createDate >= weekAgo;
        }).length,
      };

      return stats;
    }

    return null;
  } catch (error) {
    console.error("‚ùå Error getting CRM stats:", error.message);
    return null;
  }
}

// For backward compatibility - remove if not used elsewhere
function formatDetailedNotes(formData) {
  // This function is no longer used since we removed Ghi ch√∫ field
  // Keeping for compatibility, but email info is now in notification
  return `Email: ${
    formData.email
  } - Source: Website - Time: ${new Date().toISOString()}`;
}

module.exports = {
  getLarkToken,
  addRecordToCRMBase,
  sendCRMNotificationToGroup,
  getCRMStats,
  formatDetailedNotes, // Kept for compatibility
};
