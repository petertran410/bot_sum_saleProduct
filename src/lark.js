// src/lark.js - Extended with CRM Base functionality
const axios = require("axios");
const path = require("path");
const fs = require("fs");

// C·∫•u h√¨nh endpoints c·ªßa Lark API
const LARK_BASE_URL = "https://open.larksuite.com/open-apis";
const LARK_TOKEN_URL =
  "https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal";

// CRM Base configuration - Add these to your .env file
const CRM_BASE_TOKEN = process.env.LARK_CRM_BASE_TOKEN; // Your Base token
const CRM_TABLE_ID = process.env.LARK_CRM_TABLE_ID; // Your Table ID

/**
 * L·∫•y token truy c·∫≠p t·ª´ Lark API
 * @returns {Promise<string>} Token truy c·∫≠p
 */
async function getLarkToken() {
  try {
    const response = await axios.post(
      LARK_TOKEN_URL,
      {
        app_id: process.env.LARK_APP_ID,
        app_secret: process.env.LARK_APP_SECRET_KEY,
      },
      {
        headers: {
          "Content-Type": "application/json; charset=utf-8",
        },
      }
    );

    return response.data.tenant_access_token;
  } catch (error) {
    console.error("L·ªói khi l·∫•y Lark token:", error.message);
    if (error.response) {
      console.error("Ph·∫£n h·ªìi t·ª´ server:", error.response.status);
      console.error("D·ªØ li·ªáu ph·∫£n h·ªìi:", JSON.stringify(error.response.data));
    }
    throw error;
  }
}

/**
 * Format notes field for CRM
 * @param {Object} formData - Form submission data
 * @returns {string} Formatted notes
 */
function formatCRMNotes(formData) {
  const notes = [];

  if (formData.email) {
    notes.push(`üìß Email: ${formData.email}`);
  }

  if (formData.ticket) {
    notes.push(`üé´ S·ªë v√© ƒëƒÉng k√Ω: ${formData.ticket}`);
  }

  if (formData.city) {
    notes.push(`üìç S·ª± ki·ªán: ${formData.city}`);
  }

  notes.push(`üåê Ngu·ªìn: Website Registration`);
  notes.push(`‚è∞ ƒêƒÉng k√Ω l√∫c: ${new Date().toLocaleString("vi-VN")}`);
  notes.push(`üÜî IP: ${formData.clientIP || "Unknown"}`);

  return notes.join("\n");
}

/**
 * Add record to CRM Base
 * @param {Object} formData - Form submission data
 * @returns {Promise<Object>} Created record
 */
// Complete fix for src/lark.js addRecordToCRMBase function

async function addRecordToCRMBase(formData) {
  try {
    console.log("üìù Adding record to CRM Base...", formData);

    const token = await getLarkToken();

    // Create proper datetime format: "yyyy/MM/dd HH:mm" (not ISO format)
    const now = new Date();
    const dateTimeFormat =
      now.getFullYear() +
      "/" +
      String(now.getMonth() + 1).padStart(2, "0") +
      "/" +
      String(now.getDate()).padStart(2, "0") +
      " " +
      String(now.getHours()).padStart(2, "0") +
      ":" +
      String(now.getMinutes()).padStart(2, "0");

    // Map form data to CRM structure with CORRECT field types
    const recordData = {
      fields: {
        // DON'T include STT - it's auto-number (type 1005)

        // Text fields (type 1)
        "T√™n kh√°ch h√†ng": String(formData.name),
        "Nhu c·∫ßu": String(formData.type),
        "Ghi ch√∫": formatCRMNotes(formData),

        // Phone field (type 13) - keep as string
        "S·ªë ƒëi·ªán tho·∫°i": String(formData.phone),

        // DateTime fields (type 1001/1002) - use "yyyy/MM/dd HH:mm" format
        "Th·ªùi gian t·∫°o": dateTimeFormat,
        "Last Modified Date": dateTimeFormat,

        // Select field (type 3) - must use predefined option IDs
        "Tr·∫°ng th√°i": "L0", // Use "L0" instead of "M·ªõi" (L0 = Data m·ªõi nh·∫≠p)

        // DON'T set Person fields (type 1003/11) with text - leave empty or use user IDs
        // "Ng∆∞·ªùi t·∫°o": "", // Person field - leave empty
        // "Sales ph·ª• tr√°ch": "", // Person field - leave empty

        // DON'T set Formula fields (type 20)
        // "Zalo kh√°ch h√†ng": "", // Formula field - auto-generated

        // Text field for order value (surprisingly type 1, not number)
        "Gi√° Tr·ªã ƒê∆°n H√†ng": "0",
      },
    };

    console.log(
      "üì§ Sending to LarkSuite (CORRECTED FORMAT):",
      JSON.stringify(recordData, null, 2)
    );

    const response = await axios.post(
      `${LARK_BASE_URL}/bitable/v1/apps/${CRM_BASE_TOKEN}/tables/${CRM_TABLE_ID}/records`,
      recordData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.data.code === 0) {
      const record = response.data.data.record;
      const autoGeneratedSTT = record.fields.STT; // Get the auto-generated STT

      console.log(
        `‚úÖ CRM record created successfully: ${record.record_id} (Auto STT: ${autoGeneratedSTT})`
      );

      // Send notification with auto-generated STT
      await sendCRMNotificationToGroup(formData, autoGeneratedSTT);

      return {
        success: true,
        record_id: record.record_id,
        stt: autoGeneratedSTT,
        data: record,
      };
    } else {
      console.error("üìÑ LarkSuite API Error:", response.data);
      throw new Error(`Failed to add CRM record: ${response.data.msg}`);
    }
  } catch (error) {
    console.error("‚ùå Error adding record to CRM Base:", error.message);
    if (error.response) {
      console.error("üìÑ API Error Details:", error.response.data);
    }
    throw error;
  }
}

// ALTERNATIVE: If the above still fails, use this ultra-minimal version
async function addRecordToCRMBaseMinimal(formData) {
  try {
    console.log("üìù Adding record to CRM Base (minimal)...", formData);

    const token = await getLarkToken();

    // Only send the absolutely essential fields that are guaranteed to work
    const recordData = {
      fields: {
        "T√™n kh√°ch h√†ng": formData.name,
        "S·ªë ƒëi·ªán tho·∫°i": formData.phone,
        "Nhu c·∫ßu": formData.type,
        "Ghi ch√∫": `üìß Email: ${formData.email}\nüé´ S·ªë v√©: ${formData.ticket}\nüìç S·ª± ki·ªán: ${formData.city}`,
      },
    };

    console.log(
      "üì§ Sending minimal data to LarkSuite:",
      JSON.stringify(recordData, null, 2)
    );

    const response = await axios.post(
      `${LARK_BASE_URL}/bitable/v1/apps/${CRM_BASE_TOKEN}/tables/${CRM_TABLE_ID}/records`,
      recordData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.data.code === 0) {
      const record = response.data.data.record;
      const autoGeneratedSTT = record.fields.STT || "Auto";

      console.log(
        `‚úÖ CRM record created successfully (minimal): ${record.record_id}`
      );

      return {
        success: true,
        record_id: record.record_id,
        stt: autoGeneratedSTT,
        data: record,
      };
    } else {
      console.error("üìÑ LarkSuite API Error:", response.data);
      throw new Error(`Failed to add CRM record: ${response.data.msg}`);
    }
  } catch (error) {
    console.error("‚ùå Error adding minimal record to CRM Base:", error.message);
    if (error.response) {
      console.error("üìÑ API Error Details:", error.response.data);
    }
    throw error;
  }
}

/**
 * Send notification to group about new CRM entry
 * @param {Object} formData - Form data
 * @param {number} stt - STT number
 */
async function sendCRMNotificationToGroup(formData, autoGeneratedSTT) {
  try {
    const token = await getLarkToken();

    const message = {
      msg_type: "interactive",
      card: {
        config: {
          wide_screen_mode: true,
        },
        header: {
          title: {
            tag: "plain_text",
            content: "üéØ New Workshop Registration - CRM Updated",
          },
          template: "green",
        },
        elements: [
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üÜî STT:** ${autoGeneratedSTT}\n**üë§ Kh√°ch h√†ng:** ${formData.name}\n**üì± ƒêi·ªán tho·∫°i:** ${formData.phone}`,
            },
          },
          {
            tag: "div",
            fields: [
              {
                is_short: true,
                text: {
                  tag: "lark_md",
                  content: `**üìß Email:**\n${formData.email}`,
                },
              },
              {
                is_short: true,
                text: {
                  tag: "lark_md",
                  content: `**üé´ S·ªë v√©:**\n${formData.ticket}`,
                },
              },
            ],
          },
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üè¢ Nhu c·∫ßu:** ${formData.type}\n**üìç S·ª± ki·ªán:** ${formData.city}`,
            },
          },
          {
            tag: "hr",
          },
          {
            tag: "div",
            text: {
              tag: "lark_md",
              content: `**üìä Tr·∫°ng th√°i:** M·ªõi\n**üëî Sales ph·ª• tr√°ch:** Ch∆∞a ph√¢n c√¥ng\n**‚è∞ Th·ªùi gian:** ${new Date().toLocaleString(
                "vi-VN"
              )}`,
            },
          },
          {
            tag: "action",
            actions: [
              {
                tag: "button",
                text: {
                  tag: "plain_text",
                  content: "üìã M·ªü CRM",
                },
                type: "primary",
                url: `https://dieptra2018.sg.larksuite.com/base/${CRM_BASE_TOKEN}?table=${CRM_TABLE_ID}&view=vewdQ1aYB2`,
              },
              {
                tag: "button",
                text: {
                  tag: "plain_text",
                  content: "üìû G·ªçi kh√°ch",
                },
                type: "default",
                url: `tel:${formData.phone}`,
              },
            ],
          },
        ],
      },
    };

    if (process.env.LARK_CHAT_ID) {
      const response = await axios.post(
        `${LARK_BASE_URL}/message/v4/send`,
        {
          chat_id: process.env.LARK_CHAT_ID,
          ...message,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("üì¢ CRM notification sent to group");
      return response.data;
    }
  } catch (error) {
    console.error("‚ö†Ô∏è Failed to send CRM notification:", error.message);
  }
}

/**
 * Get CRM statistics
 * @returns {Promise<Object>} CRM stats
 */
async function getCRMStats() {
  try {
    const token = await getLarkToken();

    const response = await axios.get(
      `${LARK_BASE_URL}/bitable/v1/apps/${CRM_BASE_TOKEN}/tables/${CRM_TABLE_ID}/records`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
        params: {
          page_size: 500,
        },
      }
    );

    if (response.data.code === 0) {
      const records = response.data.data.items;
      const stats = {
        total: records.length,
        new: records.filter((r) => r.fields["Tr·∫°ng th√°i"] === "M·ªõi").length,
        contacted: records.filter(
          (r) => r.fields["Tr·∫°ng th√°i"] === "ƒêang li√™n h·ªá"
        ).length,
        interested: records.filter((r) => r.fields["Tr·∫°ng th√°i"] === "Quan t√¢m")
          .length,
        closed: records.filter((r) => r.fields["Tr·∫°ng th√°i"] === "ƒê√£ ch·ªët")
          .length,
        totalValue: records.reduce(
          (sum, r) => sum + (r.fields["Gi√° Tr·ªã ƒê∆°n H√†ng"] || 0),
          0
        ),
        todayCount: records.filter((r) => {
          const createDate = new Date(r.fields["Th·ªùi gian t·∫°o"]);
          const today = new Date();
          return createDate.toDateString() === today.toDateString();
        }).length,
      };

      return stats;
    }

    return null;
  } catch (error) {
    console.error("‚ùå Error getting CRM stats:", error.message);
    return null;
  }
}

// Export existing functions and new CRM functions
module.exports = {
  // Existing functions
  getLarkToken,

  // New CRM functions
  addRecordToCRMBase,
  sendCRMNotificationToGroup,
  getCRMStats,
  formatCRMNotes,
};
